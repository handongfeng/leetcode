/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(!head) return 0;
        ListNode * p1 = head;
        ListNode * p2 = head;
        ListNode * p =0;
        int n =0;
        while(p2->next && p2->next->next)
        {
           p1=p1->next;
           p2 =p2->next->next;
           if(p1==p2)
           {
               p =p1;
               break;
           }
         
        }
        if(!p) return 0;
        else
        {
            
            p1 = head;
            
            if(p1==p) return p1; // if the current two node are same, we direct return it, this the border condition, be careful
            
            while(p1->next)
            {
                p1=p1->next;
                p=p->next;
                if(p1==p)
                return p1;
            }
        }
        
        
        
    }
};