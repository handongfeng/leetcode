class Solution {
public:

    bool search1D(vector<int>  &m1d, int target, int begin, int end)
	{
		if(begin>end) return false;
		
		int n = end-begin+1;
		
		int middle = n/2 + begin;
		
		if(m1d[middle]==target) return true;
		else
		{
			if(m1d[middle]<target)
				search1D(m1d, target,begin, middle-1);
			else if (m1d[middle]>target)
				search1D(m1d, target, middle+1,end);
		}
	}
	
     bool search2D(vector<vector<int> > &matrix, int target, int begin, int end)
	 {
	 
		if (begin>end) return false;
		
		
		int  n = matrix[0].size();
		
		int m = end-begin+1;
		
		int middle = m/2 + begin;
		
		if(target>=matrix[middle][0] &&  target<=matrix[middle][n-1] )
		{
			search1D(matrix[middle], target,  0,  n-1);
		}
		else if(target<matrix[middle][0])
		{
			search2D(matrix, target,  0,middle-1);
		}
		else if(target>matrix[middle][n-1])
		{
			search2D(matrix, target,  middle+1,m-1);
		}
		
		
	 }
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
		int m= matrix.size();
		if(m<=0) return false;
	
		int  n = matrix[0].size();
		if (n<=0) return false;
		
       return search2D(matrix,  target,  0, m-1);
    }
};